events {
    worker_connections 1024;
}

http {
    # Definición de la zona de caché
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m inactive=60m max_size=1g;

    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Proxy headers comunes
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://aspnet-app:8080;

            # Habilitar la caché definida
            proxy_cache my_cache;

            # Forzar tiempos de caché
            proxy_cache_valid 200 302 1m;  # Alarga el tiempo de validez para facilitar pruebas
            proxy_cache_valid 404 1m;

            # Definir clave única del caché
            proxy_cache_key "$scheme$proxy_host$request_uri";

            # Ignorar encabezados que invalidarían la caché
            proxy_ignore_headers Cache-Control Expires Set-Cookie;

            # Bypass del caché en presencia de estos encabezados (solo si los envía el cliente)
            proxy_cache_bypass $http_pragma $http_authorization;
            proxy_no_cache $http_pragma $http_authorization;

            # Añadir encabezado para ver estado de caché en las respuestas
            add_header X-Proxy-Cache $upstream_cache_status;

            # Opcional: evita que ciertos errores de backend anulen el caché
            proxy_intercept_errors on;
        }

        # Opcional: ignora "bad headers" (solo en la respuesta del backend, no en la petición del cliente)
        # Por defecto, Nginx va a rechazar peticiones con encabezados mal formados (CRLF injection).
        # No hay un flag para "ignorar headers mal formados" en la request.
    }
}
